#ifndef AVRH
# include "cppdefs.h"

# define DEF_FOUT def_his
#else
# ifndef AVR2DH
#  define DEF_FOUT def_avg
# else
#  define DEF_FOUT def_slavg
# endif
#endif
!--> # define NCCOMPRESS

      subroutine DEF_FOUT (total_rec, ierr)

! Create/open history/averages netCDF file so the subsequent calls
! to wrt_his/avg can write model variables accessing them by netCDF
! IDs and proper record number.  This routine can work in two modes:
! either create a new file and save all netCDF variable IDs, and set
! record index to 1 (starting a new file), or open an existing file,
! verify that all dimensions are consistent with the running model
! and all required variables are present, find and save their variable
! IDs and set time record to start appending data.

! The difference between def_his and def_avg is as follows: they have
! different netCDF file name (hisname/avgname); netCDF file ID (passed
! as argument); time record index (hisindx/avgindx); array of switches
! to select which variables to write (wrthis/wrtavg); different sets
! of netCDF variable IDs (hisTime...hisHbl/avgTime...avgHbl); and the
! first attribute of each variable, long_name, has prefix 'averaged'.
! Because most of the code is identical for both routines, the second
! one is generated from the first entirely by CPP.

c--#define nf_def_var my_nf_def_var

! If SLICE_AVG is defined 'def_slavg' is also generated by CPP 

      implicit none
      integer total_rec, ierr
#include "param.h"
#include "scalars.h"
#include "ncvars.h"
#if defined WRITE_SALT_REST || defined WRITE_TEMP_REST || \
    defined WRITE_HEATFLX   || defined WRITE_CO2FLX
# include "forces.h"
#endif
#include "netcdf.inc"
      logical create_new_file
      integer lenstr, checkdims, my_nf_def_dim
      integer rec, lfnm, lvar, timedim, prev_fill_mode,
     &        r2dgrd(3), u2dgrd(3), v2dgrd(3), auxil(2)
#ifdef SOLVE3D 
# ifndef AVR2DH
     &      , r3dgrd(4), u3dgrd(4), v3dgrd(4), w3dgrd(4)
# endif
     &      , itrc
#endif
      character(len=64) text
#ifdef NCCOMPRESS
      integer ncshuff, ncdefl, nclev, ncctg
     &        , ncrchnk2(3), ncuchnk2(3), ncvchnk2(3)
# if defined SOLVE3D && !defined AVR2DH
     &        , ncrchnk3(4), ncuchnk3(4), ncvchnk3(4)
# endif
      data ncshuff, ncdefl, nclev, ncctg / 0, 1, 1, 0 /
#endif

!DL: for gas exchange fluxes:
#if defined BIOLOGY_NPZDOC && defined OXYGEN
# include "gasexc.h"
#endif /* BIOLOGY_NPZDOC && OXYGEN */
#if defined BIOLOGY_BEC2 && defined BEC2_DIAG
# include "ecosys_bec2.h"
#endif

#ifdef MASK_LAND_DATA
# ifdef HIS_DOUBLE
      real*8, parameter :: spv_set=1.D+33
# else
      real*4, parameter :: spv_set=1.E+33
# endif
#endif

#ifdef NCCOMPRESS
c  Chunk Size (atomic access size)
c  for netcdf4 (HDF5) 2 and 3d fields in output
      ncrchnk2(1)=xi_rho
      ncrchnk2(2)=eta_rho
      ncrchnk2(3)=1
      ncuchnk2(1)=xi_u
      ncuchnk2(2)=eta_rho
      ncuchnk2(3)=1
      ncvchnk2(1)=xi_rho
      ncvchnk2(2)=eta_v
      ncvchnk2(3)=1
# if defined SOLVE3D && !defined AVR2DH
      ncrchnk3(1)=xi_rho
      ncrchnk3(2)=eta_rho
      ncrchnk3(3)=1
      ncrchnk3(4)=1
      ncuchnk3(1)=xi_u
      ncuchnk3(2)=eta_rho
      ncuchnk3(3)=1
      ncuchnk3(4)=1
      ncvchnk3(1)=xi_rho
      ncvchnk3(2)=eta_v
      ncvchnk3(3)=1
      ncvchnk3(4)=1
# endif
#endif

#ifndef AVRH
# define ncid nchis
# define fname hisname
# define rec_per_file nrpfhis
# define wrt wrthis
# define vidTime hisTime
# define vidTstep hisTstep
# define vidZ hisZ
# define vidUb hisUb
# define vidVb hisVb
# define vidU hisU
# define vidV hisV
# define vidT hisT
# define vidR hisR
# define vidO hisO
# define vidW hisW
# define vidAkv hisAkv
# define vidAkt hisAkt
# if defined WRITE_CO2FLX
#  define vidCO2flx hisCO2flx
# endif
# if defined WRITE_HEATFLX
#  define vidHeatflx hisHeatflx
# endif
# if defined WRITE_TEMP_REST
#  define vidRestflxTemp hisRestflxTemp
# endif
# if defined WRITE_SALT_REST
#  define vidRestflxSalt hisRestflxSalt
# endif
# define NVDIM 4
# define RGRD r3dgrd
# define UGRD u3dgrd
# define VGRD v3dgrd
# define WGRD w3dgrd
# define vidAks hisAks
# define vidHbls hisHbls
# define vidHbbl hisHbbl
# ifdef KPP_DIAGNOSE
#  define vidKppRichm hisKppRichm
#  define vidKppRicht hisKppRicht
#  define vidKppSblSh hisKppSblSh
#  define vidKppSblSt hisKppSblSt
#  define vidKppSblRot hisKppSblRot
#  define vidKppSblEnt hisKppSblEnt
# endif
# ifdef WKB_WWAVE
#  define vidWKB hisWKB
# endif
# if defined BIOLOGY_NPZDOC || defined BIOLOGY_BEC
#  if defined CH_CARBON_DEPTH
#   define vidPHd hisPHd
#   define vidCO2STARd hisCO2STARd
#   define vidHCO3d hisHCO3d
#   define vidCO3d hisCO3d
#  endif /* CH_CARBON_DEPTH */
#  define vidPH hisPH
#  define vidPCO2 hisPCO2
#  define vidPCO2air hisPCO2air
#  define vidPARinc hisPARinc
#  define vidPAR hisPAR
#  ifdef SEDIMENT_BIOLOGY
#   define vidTsed hisTsed
#  endif
# endif /* BIOLOGY_NPZDOC || BIOLOGY_BEC */
# ifdef WRITE_DEPTHS
#  define vidz_r hisz_r
#  define vidz_w hisz_w
#  define vidHz hisHz
# endif /* WRITE_DEPTHS */
# if defined BIOLOGY_NPZDOC && defined OXYGEN
#  define vidGasExcFlux hisGasExcFlux
# endif /* BIOLOGY_NPZDOC && OXYGEN */
# if defined BIOLOGY_BEC2 && defined BEC2_DIAG
#  define vidT_bec2 hisT_bec2_diag
# endif
# ifdef MRL_WCI
#  define vidSUP hisSUP
#  define vidUST2D hisUST2D
#  define vidVST2D hisVST2D
#  define vidUST hisUST
#  define vidVST hisVST
#  define vidWST hisWST
#  define vidAkb hisAkb
#  define vidAkw hisAkw
#  define vidKVF hisKVF
#  define vidCALP hisCALP
#  define vidKAPS hisKAPS
# endif
#else /* AVRH is defined */
# ifndef AVR2DH
# define ncid ncavg
# define fname avgname
# define rec_per_file nrpfavg
# define wrt wrtavg
# define vidTime avgTime
# define vidTstep avgTstep
# define vidZ avgZ
# define vidUb avgUb
# define vidVb avgVb
# define vidU avgU
# define vidV avgV
# define vidT avgT
# define vidR avgR
# define vidO avgO
# define vidW avgW
# define vidAkv avgAkv
# define vidAkt avgAkt
# if defined WRITE_CO2FLX
#  define vidCO2flx avgCO2flx
# endif
# if defined WRITE_HEATFLX
#  define vidHeatflx avgHeatflx
# endif
# if defined WRITE_TEMP_REST
#  define vidRestflxTemp avgRestflxTemp
# endif
# if defined WRITE_SALT_REST
#  define vidRestflxSalt avgRestflxSalt
# endif
# define NVDIM 4
# define RGRD r3dgrd
# define UGRD u3dgrd
# define VGRD v3dgrd
# define WGRD w3dgrd
# define vidAks avgAks
# define vidHbls avgHbls
# define vidHbbl avgHbbl
# ifdef KPP_DIAGNOSE
#  define vidKppRichm avgKppRichm
#  define vidKppRicht avgKppRicht
#  define vidKppSblSh avgKppSblSh
#  define vidKppSblSt avgKppSblSt
#  define vidKppSblRot avgKppSblRot
#  define vidKppSblEnt avgKppSblEnt
# endif
# if defined BIOLOGY_NPZDOC || defined BIOLOGY_BEC
#  if defined CH_CARBON_DEPTH
#   define vidPHd avgPHd
#   define vidCO2STARd avgCO2STARd
#   define vidHCO3d avgHCO3d
#   define vidCO3d avgCO3d
#  endif /* CH_CARBON_DEPTH */
#  define vidPH avgPH
#  define vidPCO2 avgPCO2
#  define vidPCO2air avgPCO2air
#  define vidPARinc avgPARinc
#  define vidPAR avgPAR
#  ifdef SEDIMENT_BIOLOGY
#    define vidTsed avgTsed
#  endif
# endif /* BIOLOGY_NPZDOC || BIOLOGY_BEC */
# ifdef WRITE_DEPTHS
#  define vidz_r avgz_r
#  define vidz_w avgz_w
#  define vidHz avgHz
# endif /* WRITE_DEPTHS */
# if defined BIOLOGY_NPZDOC && defined OXYGEN
#  define vidGasExcFlux avgGasExcFlux
# endif /* BIOLOGY_NPZDOC && OXYGEN */
# if defined BIOLOGY_BEC2 && defined BEC2_DIAG
#  define vidT_bec2 avgT_bec2_diag
# endif

# ifdef WKB_WWAVE
#  define vidWKB avgWKB
# endif
# ifdef MRL_WCI
#  define vidSUP avgSUP
#  define vidUST2D avgUST2D
#  define vidVST2D avgVST2D
#  define vidUST avgUST
#  define vidWST avgWST
#  define vidVST avgVST
#  define vidAkb avgAkb
#  define vidAkw avgAkw
#  define vidKVF avgKVF
#  define vidCALP avgCALP
#  define vidKAPS avgKAPS
# endif

# else /* AVR2DH is defined */
#  define ncid ncslavg
#  define fname slavgname
#  define rec_per_file nrpfslavg
#  define wrt wrtslavg
#  define vidTime slavgTime
#  define vidTstep slavgTstep
#  define vidZ slavgZ
#  define vidUb slavgUb
#  define vidVb slavgVb
#  define vidU slavgU
#  define vidV slavgV
#  define vidT slavgT
#  define vidR slavgR
#  define vidO slavgO
#  define vidW slavgW
#  define vidAkv slavgAkv
#  define vidAkt slavgAkt
# if defined WRITE_HEATFLX
#  define vidHeatflx slavgHeatflx
# endif
# if defined WRITE_CO2FLX
#  define vidCO2flx slavgCO2flx
# endif
# if defined WRITE_TEMP_REST
#  define vidRestflxTemp slavgRestflxTemp
# endif
# if defined WRITE_SALT_REST
#  define vidRestflxSalt slavgRestflxSalt
# endif
#  define NVDIM 3
#  define RGRD r2dgrd
#  define UGRD u2dgrd
#  define VGRD v2dgrd
#  define WGRD r2dgrd
#  define vidAks slavgAks
#  define vidHbls slavgHbls
#  define vidHbbl slavgHbbl
# ifdef KPP_DIAGNOSE
#  define vidKppRichm slavgKppRichm
#  define vidKppRicht slavgKppRicht
#  define vidKppSblSh slavgKppSblSh
#  define vidKppSblSt slavgKppSblSt
#  define vidKppSblRot slavgKppSblRot
#  define vidKppSblEnt slavgKppSblEnt
# endif
#  if defined BIOLOGY_NPZDOC || defined BIOLOGY_BEC
#   if defined CH_CARBON_DEPTH
#    define vidPHd slavgPHd
#    define vidCO2STARd slavgCO2STARd
#    define vidHCO3d slavgHCO3d
#    define vidCO3d slavgCO3d
#   endif /* CH_CARBON_DEPTH */
#   define vidPH slavgPH
#   define vidPCO2 slavgPCO2
#   define vidPCO2air slavgPCO2air
#   define vidPARinc slavgPARinc
#   define vidPAR slavgPAR
#   ifdef SEDIMENT_BIOLOGY
#     define vidTsed slavgTsed
#   endif
#  endif /* BIOLOGY_NPZDOC || BIOLOGY_BEC */
#  if defined BIOLOGY_NPZDOC && defined OXYGEN
#    define vidGasExcFlux slavgGasExcFlux
#  endif /* BIOLOGY_NPZDOC && OXYGEN */
# ifdef WRITE_DEPTHS
#  define vidz_r slavgz_r
#  define vidz_w slavgz_w
#  define vidHz slavgHz
# endif /* WRITE_DEPTHS */
# if defined BIOLOGY_BEC2 && defined BEC2_DIAG
#  define vidT_bec2 slavgT_bec2_diag
# endif
# ifdef WKB_WWAVE
#  define vidWKB avgWKB
# endif
# ifdef MRL_WCI
#  define vidSUP slavgSUP
#  define vidUST2D slavgUST2D
#  define vidVST2D slavgVST2D
#  define vidUST slavgUST
#  define vidWST slavgWST
#  define vidVST slavgVST
#  define vidAkb slavgAkb
#  define vidAkw slavgAkw
#  define vidKVF slavgKVF
#  define vidCALP slavgCALP
#  define vidKAPS slavgKAPS
# endif
# endif /* AVR2DH */
#endif /* AVRH */

! Put time record index into file name. In  the case when model
! output is to be arranged into sequence of named files, the naming
! convention is as follows: 'his_root.INDEX.[MPI_node.]nc', where
! INDEX is an integer number such that (i) it is divisible by the
! specified number of records per file; and (ii)
!
!      INDEX + record_within_the_file = total_record
!
! where, 1 =< record_within_the_file =< records_per_file, so that
! total_record changes continuously throughout the sequence of files.

      ierr=0
      lfnm=lenstr(fname)
      if (rec_per_file > 0) then
        lvar=total_rec-(1+mod(total_rec-1, rec_per_file))
        call insert_time_index(fname, lfnm, lvar,  ierr)
        if (ierr /= 0) goto 99
      endif

! Decide whether to create a new file, or open an existing one.
! Overall the code below is globally organized as a 3-way switch,
!
! 10  if (create_new_file) then
!        ... create new file, save netCDF ids for all variables;
!     elseif (ncid == -1) then
!        ... try to open existing file and check its dimensions
!       if (cannot be opened or rejected) then
!         create_new_file=.true.
!         goto 10
!       endif   and prepare
!        .... prepare the file for adding new data,
!        .... find and save netCDF ids for all variables
!     else
!        .... just open, no checking, all ids are assumed to be already
!        .... known (applies only for single file output from MPI code)
!     endif
!
! which is designed to implement a flexible opening policy: if
! ldefhis=.true., it forces creation of a new file [hence, if the
! file already exists, it will be overwritten]; conversely, if
! ldefhis=.false. it is assumed that the file already exists and an
! attempt to open it is made; if the attempt is successful, the file
! is prepared for appending hew data; if it fails, a new file will
! be created.

      create_new_file=ldefhis            !<-- initialize
      if (ncid /= -1)  create_new_file=.false.
#if defined MPI && !defined PARALLEL_FILES
      if (mynode > 0) create_new_file=.false.
#endif

! Create new history/averages file:    Put global attributes and
! ====== === ======= ======== =====    define all the variables.

   10 if (create_new_file) then
        ierr=nf_create(fname(1:lfnm), 
     &                 or(nf_clobber,nf_clobber+NCFILEFORMAT), ncid)
        if (ierr == nf_noerr) then
          ierr=nf_set_fill(ncid, nf_nofill, prev_fill_mode)
          if (ierr /= nf_noerr) then
# ifdef AVRH
            write(*,'(1x,4A,I4)') '### ERROR: def_avg :: Cannot ',
# else
            write(*,'(1x,4A,I4)') '### ERROR: def_his :: Cannot ',
# endif
     &        'switch to ''nf_nofill'' mode.', nf_strerror(ierr)
     &         MYID
          endif
        else
#ifdef AVRH
          write(*,'(/1x,4A/12x,A/)')  '### ERROR: def_avg :: ',
#else
          write(*,'(/1x,4A/12x,A/)')  '### ERROR: def_his :: ',
#endif
     &                'Cannot create ''', fname(1:lfnm), '''.',
     &                                       nf_strerror(ierr)
        endif
        if (ierr /= nf_noerr) goto 99
        if (rec_per_file == 0) total_rec=0

! Put global attributes:
!---- ------ -----------

        call put_global_atts (ncid, ierr)

! Define dimensions for field placement on staggered grids:
! ------ ---------- --- ----- --------- -- --------- -------

        ierr=my_nf_def_dim (ncid, 'xi_rho',  xi_rho,  r2dgrd(1))
        ierr=my_nf_def_dim (ncid, 'xi_u',    xi_u,    u2dgrd(1))
        ierr=my_nf_def_dim (ncid, 'eta_rho', eta_rho, r2dgrd(2))
        ierr=my_nf_def_dim (ncid, 'eta_v',   eta_v,   v2dgrd(2))
#ifdef SOLVE3D 
# ifndef AVR2DH
        ierr=my_nf_def_dim (ncid, 's_rho',   N,       r3dgrd(3))
        ierr=my_nf_def_dim (ncid, 's_w',     N+1,     w3dgrd(3))
# else
        ierr=nf_put_att_int (ncid, nf_global, 
     &              'Sigma_level_of_slices',
     &                 NF_INT, 1, ksl)
        ierr=nf_put_att_int (ncid, nf_global, 
     &                    'Total_number_of_sigma_levels',
     &                 NF_INT, 1, N)
# endif
#endif
        ierr=my_nf_def_dim (ncid, 'time', nf_unlimited, timedim)
        ierr=my_nf_def_dim(ncid, 'auxil',   iaux,     auxil(1))

        auxil(2)=timedim

        r2dgrd(3)=timedim                          ! Free surface

        u2dgrd(2)=r2dgrd(2) ; u2dgrd(3)=timedim    ! 2D UBAR-type

        v2dgrd(1)=r2dgrd(1) ; v2dgrd(3)=timedim    ! 2D VBAR-type

#if defined SOLVE3D && !defined AVR2DH
        r3dgrd(1)=r2dgrd(1)
        r3dgrd(2)=r2dgrd(2) ; r3dgrd(4)=timedim    ! 3D RHO-type

        u3dgrd(1)=u2dgrd(1) ; u3dgrd(3)=r3dgrd(3)  ! 3D U-type
        u3dgrd(2)=r2dgrd(2) ; u3dgrd(4)=timedim    ! 

        v3dgrd(1)=r2dgrd(1) ; v3dgrd(3)=r3dgrd(3)  ! 3D V-type
        v3dgrd(2)=v2dgrd(2) ; v3dgrd(4)=timedim    !

        w3dgrd(1)=r2dgrd(1) ; w3dgrd(4)=timedim    ! 3D W-type
        w3dgrd(2)=r2dgrd(2)
#endif
#if (defined PUT_GRID_INTO_HISTORY && !defined AVRH)\
 || (defined PUT_GRID_INTO_AVERAGES && defined AVRH)

! Define grid variables.
! ------ ---- ----------

        if (total_rec <= 1) call def_grid(ncid, r2dgrd)
#endif
 
! Define evolving model variables.
! ------ -------- ----- ----------

! Time-step number and time-record indices: (history file only, this
! may be needed in the event when a history record is used to restart
! the current model run);
#ifndef AVRH 
        ierr=nf_def_var(ncid, 'time_step', nf_int, 2, auxil, vidTstep)
        ierr=nf_put_att_text (ncid, vidTstep, 'long_name', 48,
     &       'time step and record numbers from initialization')
#endif

! Time.
        lvar=lenstr(vname(1,indxTime))
        ierr=nf_def_var(ncid, vname(1,indxTime)(1:lvar), NF_FTYPE,
     &                                        1, timedim, vidTime)
#ifdef AVRH
        text='averaged '/ /vname(2,indxTime)
#else
        text=vname(2,indxTime)
#endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidTime, 'long_name', lvar,
     &                                            text(1:lvar))
        lvar=lenstr(vname(3,indxTime))
        ierr=nf_put_att_text (ncid, vidTime, 'units',  lvar,
     &                               vname(3,indxTime)(1:lvar))
#ifdef CALENDAR
        lvar=lenstr(CALENDAR)
        ierr=nf_put_att_text (ncid, vidTime, 'calendar',  lvar,
     &                      CALENDAR)
#else
        lvar=lenstr('360_day')
        ierr=nf_put_att_text (ncid, vidTime, 'calendar',  lvar,
     &                       '360_day')
#endif

! Free-surface and 2D barotropic velocity components

        if (wrt(indxZ) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxZ))
          ierr=nf_def_var(ncid, vname(1,indxZ)(1:lvar), NF_FOUT,
     &                                         3, r2dgrd, vidZ)
#ifdef AVRH
          text='averaged '/ /vname(2,indxZ)
#else
          text=vname(2,indxZ)
#endif
          lvar=lenstr(text)
          ierr=nf_put_att_text(ncid, vidZ, 'long_name', lvar,
     &                                          text(1:lvar))
          lvar=lenstr(vname(3,indxZ))
          ierr=nf_put_att_text(ncid, vidZ, 'units',     lvar,
     &                                 vname(3,indxZ)(1:lvar))
          ierr=nf_put_att_text (ncid, vidZ, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#ifdef MASK_LAND_DATA
          ierr=nf_put_att_FOUT(ncid, vidZ, '_FillValue', NF_FOUT,
     &                                               1, spv_set)
          if (ierr /= nf_noerr) then
           write(*,*)  'nf_put_att_XXX:', nf_strerror(ierr)
          endif
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidZ, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidZ, ncctg, ncrchnk2)
#endif

        endif

        if (wrt(indxUb) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxUb))
          ierr=nf_def_var(ncid, vname(1,indxUb)(1:lvar), NF_FOUT,
     &                                         3, u2dgrd, vidUb)
#ifdef AVRH
          text='averaged '/ /vname(2,indxUb)
#else
          text=vname(2,indxUb)
#endif
          lvar=lenstr(text)
          ierr=nf_put_att_text(ncid, vidUb, 'long_name', lvar,
     &                                          text(1:lvar))
          lvar=lenstr(vname(3,indxUb))
          ierr=nf_put_att_text(ncid, vidUb, 'units',     lvar,
     &                               vname(3,indxUb)(1:lvar))
          ierr=nf_put_att_text (ncid, vidUb, 'coordinates',
     &                            11, 'lon_u lat_u') 
#ifdef MASK_LAND_DATA
          ierr=nf_put_att_FOUT(ncid, vidUb, '_FillValue', NF_FOUT,
     &                                                1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidUb, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidUb, ncctg, ncuchnk2)
#endif
        endif

        if (wrt(indxVb) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxVb))
          ierr=nf_def_var(ncid, vname(1,indxVb)(1:lvar), NF_FOUT,
     &                                         3, v2dgrd, vidVb)
#ifdef AVRH
          text='averaged '/ /vname(2,indxVb)
#else
          text=vname(2,indxVb)
#endif
          lvar=lenstr(text)
          ierr=nf_put_att_text(ncid, vidVb, 'long_name', lvar,
     &                                            text(1:lvar))
          lvar=lenstr(vname(3,indxVb))
          ierr=nf_put_att_text(ncid, vidVb, 'units',     lvar,
     &                                 vname(3,indxVb)(1:lvar))
          ierr=nf_put_att_text (ncid, vidVb, 'coordinates',
     &                            11, 'lon_v lat_v') 
#ifdef MASK_LAND_DATA
          ierr=nf_put_att_FOUT(ncid, vidVb, '_FillValue', NF_FOUT,
     &                                                1, spv_set)
#endif
        endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidVb, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidVb, ncctg, ncvchnk2)
#endif
#ifdef SOLVE3D

! 3D momenta in XI- and ETA-directions.

        if (wrt(indxU) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxU))
          ierr=nf_def_var(ncid, vname(1,indxU)(1:lvar), NF_FOUT,
     &                                           NVDIM, UGRD, vidU)
! Remark: Sasha 2016     &                                         4, u3dgrd, vidU)
# ifdef AVRH
          text='averaged '/ /vname(2,indxU)
# else
          text=vname(2,indxU)
# endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidU, 'long_name', lvar,
     &                                            text(1:lvar))
          lvar=lenstr(vname(3,indxU))
          ierr=nf_put_att_text (ncid, vidU, 'units',     lvar,
     &                                  vname(3,indxU)(1:lvar))
          ierr=nf_put_att_text (ncid, vidU, 'coordinates',
     &                            11, 'lon_u lat_u') 
#ifdef MASK_LAND_DATA
          ierr=nf_put_att_FOUT (ncid, vidU, '_FillValue', NF_FOUT,
     &                                                 1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidU, ncshuff, ncdefl, nclev )
          ierr=nf_def_var_chunking(ncid, vidU, ncctg, ncuchnk3)
#endif

        endif
 
        if (wrt(indxV) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxV))
          ierr=nf_def_var(ncid, vname(1,indxV)(1:lvar), NF_FOUT,
     &                                           NVDIM, VGRD, vidV)
! Remark: Sasha2016     &                                           4, v3dgrd, vidV)
# ifdef AVRH
          text='2d-slice of averaged '/ /vname(2,indxV)
# else
          text='2d-slice of '/ /vname(2,indxV)
# endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidV, 'long_name', lvar,
     &                                            text(1:lvar))
          lvar=lenstr(vname(3,indxV))
          ierr=nf_put_att_text (ncid, vidV, 'units',     lvar,
     &                                  vname(3,indxV)(1:lvar))
          ierr=nf_put_att_text (ncid, vidV, 'coordinates',
     &                            11, 'lon_v lat_v') 
# ifdef MASK_LAND_DATA
          ierr=nf_put_att_FOUT (ncid, vidV, '_FillValue', NF_FOUT,
     &                                                 1, spv_set)
# endif
# ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidV, ncshuff, ncdefl, nclev )
          ierr=nf_def_var_chunking(ncid, vidV, ncctg, ncvchnk3)
# endif
        endif

! Tracer variables.

        do itrc=1,NT
          if (wrt(indxT+itrc-1) .and. ierr == nf_noerr) then
            lvar=lenstr(vname(1,indxT+itrc-1))
            ierr=nf_def_var (ncid, vname(1,indxT+itrc-1)(1:lvar),
     &                             NF_FOUT, NVDIM, RGRD, vidT(itrc))
# ifdef AVRH
            text='averaged '/ /vname(2,indxT+itrc-1)
# else
            text=vname(2,indxT+itrc-1)
# endif
            lvar=lenstr(text)
            ierr=nf_put_att_text (ncid, vidT(itrc), 'long_name',
     &                                          lvar, text(1:lvar))
            lvar=lenstr(vname(3,indxT+itrc-1))
            ierr=nf_put_att_text (ncid, vidT(itrc), 'units', lvar,
     &                               vname(3,indxT+itrc-1)(1:lvar))
            ierr=nf_put_att_text (ncid, vidT(itrc), 'coordinates',
     &                            15, 'lon_rho lat_rho') 
# ifdef MASK_LAND_DATA
            ierr=nf_put_att_FOUT (ncid, vidT(itrc), '_FillValue',
     &                                       NF_FOUT, 1, spv_set)
# endif
# ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidT, ncshuff, ncdefl, nclev )
          ierr=nf_def_var_chunking(ncid, vidT, ncctg, ncrchnk3)
# endif
          endif
        enddo

# ifdef SEDIMENT_BIOLOGY
!
! Sediment tracer variables.
!
        do itrc=1,NT_sed
          if (wrt(indxSedOrgN+itrc-1)) then
            lvar=lenstr(vname(1,indxSedOrgN+itrc-1))
            ierr=nf_def_var (ncid, 
     &           vname(1,indxSedOrgN+itrc-1)(1:lvar),
     &           NF_FOUT, 3, r2dgrd, vidTsed(itrc))
# ifndef AVRH
            lvar=lenstr(vname(2,indxSedOrgN+itrc-1))
            ierr=nf_put_att_text (ncid, vidTsed(itrc), 'long_name',
     &           lvar, vname(2,indxSedOrgN+itrc-1)(1:lvar))
# else
            text='averaged '/ /vname(2,indxSedOrgN+itrc-1)
            lvar=lenstr(text)
            ierr=nf_put_att_text (ncid, vidTsed(itrc), 'long_name',
     &           lvar, text(1:lvar))
# endif
            lvar=lenstr(vname(3,indxSedOrgN+itrc-1))
            ierr=nf_put_att_text (ncid, vidTsed(itrc), 'units', lvar,
     &           vname(3,indxSedOrgN+itrc-1)(1:lvar))
            ierr=nf_put_att_text (ncid, vidTsed, 'coordinates',
     &                            15, 'lon_rho lat_rho') 
# ifdef MASK_LAND_DATA
            ierr=nf_put_att_FOUT (ncid, vidTsed(itrc), '_FillValue',
     &                                       NF_FOUT, 1, spv_set)
# endif
# ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidTsed, ncshuff, ncdefl, nclev )
          ierr=nf_def_var_chunking(ncid, vidTsed, ncctg, ncrchnk3)
# endif
          endif
        enddo
# endif /* SEDIMENT_BIOLOGY */

! Density anomaly.

        if (wrt(indxR) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxR))
          ierr=nf_def_var (ncid, vname(1,indxR)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidR)
# ifdef AVRH
          text='averaged '/ /vname(2,indxR)
# else
          text=vname(2,indxR)
# endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidR, 'long_name', lvar,
     &                                            text(1:lvar))
          lvar=lenstr(vname(3,indxR))
          ierr=nf_put_att_text (ncid, vidR, 'units',     lvar,
     &                                  vname(3,indxR)(1:lvar))
          ierr=nf_put_att_text (ncid, vidR, 'coordinates',
     &                            15, 'lon_rho lat_rho') 
#ifdef MASK_LAND_DATA
          ierr=nf_put_att_FOUT (ncid, vidR, '_FillValue', NF_FOUT,
     &                                                 1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidR, ncshuff, ncdefl, nclev )
          ierr=nf_def_var_chunking(ncid, vidR, ncctg, ncrchnk3)
#endif
        endif

! S-coordinate "omega" vertical velocity.

        if (wrt(indxO) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxO))
          ierr=nf_def_var (ncid, vname(1,indxO)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidO)
# ifdef AVRH
          text='averaged '/ /vname(2,indxO)
# else
          text=vname(2,indxO)
# endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidO, 'long_name', lvar,
     &                                            text(1:lvar))
          lvar=lenstr(vname(3,indxO))
          ierr=nf_put_att_text (ncid, vidO, 'units',     lvar,
     &                                  vname(3,indxO)(1:lvar))
          ierr=nf_put_att_text (ncid, vidO, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidO, '_FillValue', NF_FOUT,
     &                                                 1, spv_set)
#endif

#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidO, ncshuff, ncdefl, nclev )
          ierr=nf_def_var_chunking(ncid, vidO, ncctg, ncrchnk3)
#endif
        endif

! True W-vertical velocity.

        if (wrt(indxW) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxW))
          ierr=nf_def_var (ncid, vname(1,indxW)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidW)
# ifdef AVRH
          text='averaged '/ /vname(2,indxW)
# else
          text=vname(2,indxW)
# endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidW, 'long_name', lvar,
     &                                            text(1:lvar))
          lvar=lenstr(vname(3,indxW))
          ierr=nf_put_att_text (ncid, vidW, 'units',     lvar,
     &                                  vname(3,indxW)(1:lvar))
          ierr=nf_put_att_text (ncid, vidW, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidW, '_FillValue', NF_FOUT,
     &                                                 1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidW, ncshuff, ncdefl, nclev )
          ierr=nf_def_var_chunking(ncid, vidW, ncctg, ncrchnk3)
#endif
        endif

! Vertical viscosity coefficient.

        if (wrt(indxAkv) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxAkv))
          ierr=nf_def_var (ncid, vname(1,indxAkv)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidAkv)
# ifdef AVRH
          text='averaged '/ /vname(2,indxAkv)
# else
          text=vname(2,indxAkv)
# endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidAkv, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxAkv))
          ierr=nf_put_att_text (ncid, vidAkv, 'units',     lvar,
     &                                  vname(3,indxAkv)(1:lvar))
          ierr=nf_put_att_text (ncid, vidAkt, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidAkv, '_FillValue', NF_FOUT,
     &                                                   1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidAkv, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidAkv, ncctg, ncrchnk3)
#endif
        endif

! Vertical thermal conductivity coefficient.

        if (wrt(indxAkt) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxAkt))
          ierr=nf_def_var (ncid, vname(1,indxAkt)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidAkt)
# ifdef AVRH
          text='averaged '/ /vname(2,indxAkt)
# else
          text=vname(2,indxAkt)
# endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidAkt, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxAkt))
          ierr=nf_put_att_text (ncid, vidAkt, 'units',     lvar,
     &                                  vname(3,indxAkt)(1:lvar))
          ierr=nf_put_att_text (ncid, vidAkt, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidAkt, '_FillValue', NF_FOUT,
     &                                                   1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidAkt, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidAkt, ncctg, ncrchnk3)
#endif
        endif
# ifdef SALINITY
! Vertical diffusion coefficient for salinity.

        if (wrt(indxAks) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxAks))
          ierr=nf_def_var (ncid, vname(1,indxAks)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidAks)
#  ifdef AVRH
          text='averaged '/ /vname(2,indxAks)
#  else
          text=vname(2,indxAks)
#  endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidAks, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxAks))
          ierr=nf_put_att_text (ncid, vidAks, 'units',     lvar,
     &                                  vname(3,indxAks)(1:lvar))
          ierr=nf_put_att_text (ncid, vidAks, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidAks, '_FillValue', NF_FOUT,
     &                                                   1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidAks, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidAks, ncctg, ncrchnk3)
#endif
        endif
# endif /* SALINITY */
!AH16:
# if defined WRITE_CO2FLX
! CO2 flux
        if (wrt(indxCO2flx) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxCO2flx))
          ierr=nf_def_var (ncid, vname(1,indxCO2flx)(1:lvar),
     &                           NF_FOUT, 3, r2dgrd, vidCO2flx)
#  ifdef AVRH
          text='averaged '/ /vname(2,indxCO2flx)
#  else
          text=vname(2,indxCO2flx)
#  endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidCO2flx, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxCO2flx))
          ierr=nf_put_att_text (ncid, vidCO2flx, 'units',     lvar,
     &                                 vname(3,indxCO2flx)(1:lvar))
          ierr=nf_put_att_text (ncid, vidCO2flx, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#  ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidCO2flx, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#  endif
#  ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidCO2flx, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidCO2flx, ncctg, ncrchnk2)
#  endif
        endif
# endif /* WRITE_CO2FLX */
!AH16:
# if defined WRITE_HEATFLX
! Heat flux
        if (wrt(indxHeatflx) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxHeatflx))
          ierr=nf_def_var (ncid, vname(1,indxHeatflx)(1:lvar),
     &                           NF_FOUT, 3, r2dgrd, vidHeatflx)
#  ifdef AVRH
          text='averaged '/ /vname(2,indxHeatflx)
#  else
          text=vname(2,indxHeatflx)
#  endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidHeatflx, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxHeatflx))
          ierr=nf_put_att_text (ncid, vidHeatflx, 'units',     lvar,
     &                                 vname(3,indxHeatflx)(1:lvar))
          ierr=nf_put_att_text (ncid, vidHeatflx, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#  ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidHeatflx, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#  endif
#  ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidHeatflx, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidHeatflx, ncctg, ncrchnk2)
#  endif
        endif
# endif /* WRITE_HEATFLX */
!AH16:
# if defined WRITE_TEMP_REST
! Restoring flux for temperature
        if (wrt(indxRestflxTemp) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxRestflxTemp))
          ierr=nf_def_var (ncid, vname(1,indxRestflxTemp)(1:lvar),
     &                           NF_FOUT, 3, r2dgrd, vidRestflxTemp)
#  ifdef AVRH
          text='averaged '/ /vname(2,indxRestflxTemp)
#  else
          text=vname(2,indxRestflxTemp)
#  endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidRestflxTemp, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxRestflxTemp))
          ierr=nf_put_att_text (ncid, vidRestflxTemp, 'units',     lvar,
     &                                 vname(3,indxRestflxTemp)(1:lvar))
          ierr=nf_put_att_text (ncid, vidRestflxTemp, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#  ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidRestflxTemp, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#  endif
#  ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidRestflxTemp, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidRestflxTemp, ncctg, ncrchnk2)
#  endif
        endif
# endif /* WRITE_TEMP_REST */
!AH16:
# if defined WRITE_SALT_REST
! Restoring flux for salinity
        if (wrt(indxRestflxSalt) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxRestflxSalt))
          ierr=nf_def_var (ncid, vname(1,indxRestflxSalt)(1:lvar),
     &                           NF_FOUT, 3, r2dgrd, vidRestflxSalt)
#  ifdef AVRH
          text='averaged '/ /vname(2,indxRestflxSalt)
#  else
          text=vname(2,indxRestflxSalt)
#  endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidRestflxSalt, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxRestflxSalt))
          ierr=nf_put_att_text (ncid, vidRestflxSalt, 'units',     lvar,
     &                                 vname(3,indxRestflxSalt)(1:lvar))
          ierr=nf_put_att_text (ncid, vidRestflxSalt, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#  ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidRestflxSalt, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#  endif
#  ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidRestflxSalt, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidRestflxSalt, ncctg, ncrchnk2)
#  endif
        endif
# endif /* WRITE_SALT_REST */
# ifdef LMD_KPP
! Depth of surface planetary boundary layer.

        if (wrt(indxHbls) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxHbls))
          ierr=nf_def_var (ncid, vname(1,indxHbls)(1:lvar),
     &                           NF_FOUT, 3, r2dgrd, vidHbls)
#  ifdef AVRH
          text='averaged '/ /vname(2,indxHbls)
#  else
          text=vname(2,indxHbls)
#  endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidHbls, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxHbls))
          ierr=nf_put_att_text (ncid, vidHbls, 'units',     lvar,
     &                                 vname(3,indxHbls)(1:lvar))
          ierr=nf_put_att_text (ncid, vidHbls, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidHbls, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidHbls, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidHbls, ncctg, ncrchnk2)
#endif
        endif
# endif /* LMD_KPP */
# ifdef LMD_BKPP
! Thickness of bottom boundary layer.

        if (wrt(indxHbbl) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxHbbl))
          ierr=nf_def_var (ncid, vname(1,indxHbbl)(1:lvar),
     &                            NF_FOUT, 3, r2dgrd, vidHbbl)
#  ifdef AVRH
          text='averaged '/ /vname(2,indxHbbl)
#  else
          text=vname(2,indxHbbl)
#  endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidHbbl, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxHbbl))
          ierr=nf_put_att_text (ncid, vidHbbl, 'units',     lvar,
     &                                  vname(3,indxHbbl)(1:lvar))
          ierr=nf_put_att_text (ncid, vidHbbl, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#  ifdef MASK_LAND_DATA
          ierr=nf_put_att_FOUT (ncid, vidHbbl, '_FillValue',
     &                                       NF_FOUT, 1, spv_set)
#  endif
        endif
# endif /* LMD_BKPP */
# ifdef KPP_DIAGNOSE
!KppRichm
        if (wrt(indxKppRichm) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxKppRichm))
          ierr=nf_def_var (ncid, vname(1,indxKppRichm)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidKppRichm)
#  ifdef AVRH
          text='averaged '/ /vname(2,indxKppRichm)
#  endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidKppRichm, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxKppRichm))
          ierr=nf_put_att_text (ncid, vidKppRichm, 'units',     lvar,
     &                                  vname(3,indxKppRichm)(1:lvar))
          ierr=nf_put_att_text (ncid, vidKppRichm, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#  ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidKppRichm, '_FillValue', NF_FOUT,
     &                                                   1, spv_set)
#  endif
#  ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidKppRichm, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidKppRichm, ncctg, ncrchnk3)
#  endif
        endif
!KppRicht
        if (wrt(indxKppRicht) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxKppRicht))
          ierr=nf_def_var (ncid, vname(1,indxKppRicht)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidKppRicht)
#  ifdef AVRH
          text='averaged '/ /vname(2,indxKppRicht)
#  endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidKppRicht, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxKppRicht))
          ierr=nf_put_att_text (ncid, vidKppRicht, 'units',     lvar,
     &                                  vname(3,indxKppRicht)(1:lvar))
          ierr=nf_put_att_text (ncid, vidKppRicht, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#  ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidKppRicht, '_FillValue', NF_FOUT,
     &                                                   1, spv_set)
#  endif
#  ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidKppRicht, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidKppRicht, ncctg, ncrchnk3)
#  endif
        endif
!KppSblSh
        if (wrt(indxKppSblSh) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxKppSblSh))
          ierr=nf_def_var (ncid, vname(1,indxKppSblSh)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidKppSblSh)
#  ifdef AVRH
          text='averaged '/ /vname(2,indxKppSblSh)
#  endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidKppSblSh, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxKppSblSh))
          ierr=nf_put_att_text (ncid, vidKppSblSh, 'units',     lvar,
     &                                  vname(3,indxKppSblSh)(1:lvar))
          ierr=nf_put_att_text (ncid, vidKppSblSh, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#  ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidKppSblSh, '_FillValue', NF_FOUT,
     &                                                   1, spv_set)
#  endif
#  ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidKppSblSh, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidKppSblSh, ncctg, ncrchnk3)
#  endif
        endif
!KppSblSt
        if (wrt(indxKppSblSt) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxKppSblSt))
          ierr=nf_def_var (ncid, vname(1,indxKppSblSt)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidKppSblSt)
#  ifdef AVRH
          text='averaged '/ /vname(2,indxKppSblSt)
#  endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidKppSblSt, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxKppSblSt))
          ierr=nf_put_att_text (ncid, vidKppSblSt, 'units',     lvar,
     &                                  vname(3,indxKppSblSt)(1:lvar))
          ierr=nf_put_att_text (ncid, vidKppSblSt, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#  ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidKppSblSt, '_FillValue', NF_FOUT,
     &                                                   1, spv_set)
#  endif
#  ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidKppSblSt, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidKppSblSt, ncctg, ncrchnk3)
#  endif
        endif
!KppSblRot
        if (wrt(indxKppSblRot) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxKppSblRot))
          ierr=nf_def_var (ncid, vname(1,indxKppSblRot)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidKppSblRot)
#  ifdef AVRH
          text='averaged '/ /vname(2,indxKppSblRot)
#  endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidKppSblRot, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxKppSblRot))
          ierr=nf_put_att_text (ncid, vidKppSblRot, 'units',     lvar,
     &                                  vname(3,indxKppSblRot)(1:lvar))
          ierr=nf_put_att_text (ncid, vidKppSblRot, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#  ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidKppSblRot, '_FillValue', NF_FOUT,
     &                                                   1, spv_set)
#  endif
#  ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidKppSblRot, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidKppSblRot, ncctg, ncrchnk3)
#  endif
        endif
!KppSblEnt
        if (wrt(indxKppSblEnt) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxKppSblEnt))
          ierr=nf_def_var (ncid, vname(1,indxKppSblEnt)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidKppSblEnt)
#  ifdef AVRH
          text='averaged '/ /vname(2,indxKppSblEnt)
#  endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidKppSblEnt, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxKppSblEnt))
          ierr=nf_put_att_text (ncid, vidKppSblEnt, 'units',     lvar,
     &                                  vname(3,indxKppSblEnt)(1:lvar))
          ierr=nf_put_att_text (ncid, vidKppSblEnt, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#  ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidKppSblEnt, '_FillValue', NF_FOUT,
     &                                                   1, spv_set)
#  endif
#  ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidKppSblEnt, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidKppSblEnt, ncctg, ncrchnk3)
#  endif
        endif
# endif /* KPP_DIAGNOSE */

# if defined BIOLOGY_BEC || (defined BIOLOGY_NPZDOC && \
    defined OXYGEN && defined CARBON)
#  if defined CH_CARBON_DEPTH

!
! HCO3_depth
!
        lvar=lenstr(vname(1,indxHCO3d_rst))
        ierr=nf_def_var (ncid, vname(1,indxHCO3d_rst)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidHCO3d)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxHCO3d_rst)
#  else
        text=vname(2,indxHCO3d_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidHCO3d, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxHCO3d_rst))
        ierr=nf_put_att_text (ncid, vidHCO3d, 'units',     lvar,
     &                                  vname(3,indxHCO3d_rst)(1:lvar))
          ierr=nf_put_att_text (ncid, vidHCO3d, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#ifdef MASK_LAND_DATA
        ierr=nf_put_att_FOUT (ncid, vidHCO3d, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif

!
! CO3_depth
!
        lvar=lenstr(vname(1,indxCO3d_rst))
        ierr=nf_def_var (ncid, vname(1,indxCO3d_rst)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidCO3d)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxCO3d_rst)
#  else
        text=vname(2,indxCO3d_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidCO3d, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxCO3d_rst))
        ierr=nf_put_att_text (ncid, vidCO3d, 'units',     lvar,
     &                                  vname(3,indxCO3d_rst)(1:lvar))
          ierr=nf_put_att_text (ncid, vidCO3d, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#ifdef MASK_LAND_DATA
        ierr=nf_put_att_FOUT (ncid, vidCO3d, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif


!
! CO2STAR_DEPTH
!
        lvar=lenstr(vname(1,indxCO2STARd_rst))
        ierr=nf_def_var (ncid, vname(1,indxCO2STARd_rst)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidCO2STARd)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxCO2STARd_rst)
#  else
        text=vname(2,indxCO2STARd_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidCO2STARd, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxCO2STARd_rst))
        ierr=nf_put_att_text (ncid, vidCO2STARd, 'units',     lvar,
     &                                  vname(3,indxCO2STARd_rst)(1:lvar))
          ierr=nf_put_att_text (ncid, vidCO2STARd, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#ifdef MASK_LAND_DATA
        ierr=nf_put_att_FOUT (ncid, vidCO2STARd, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif

!
! PH_DEPTH
!         
         lvar=lenstr(vname(1,indxPHd_rst))
        ierr=nf_def_var (ncid, vname(1,indxPHd_rst)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidPHd)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxPHd_rst)
#  else
        text=vname(2,indxPHd_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidPHd, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxPHd_rst))
        ierr=nf_put_att_text (ncid, vidPHd, 'units',     lvar,
     &                                  vname(3,indxPHd_rst)(1:lvar))
#ifdef MASK_LAND_DATA
        ierr=nf_put_att_FOUT (ncid, vidPHd, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif

#endif /*CH_CARBON_DEPTH*/

!
! pH
!
         lvar=lenstr(vname(1,indxPH_rst))
        ierr=nf_def_var (ncid, vname(1,indxPH_rst)(1:lvar), NF_FOUT,
     &                                           3, r2dgrd, vidPH)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxPH_rst)
#  else
        text=vname(2,indxPH_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidPH, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxPH_rst))
        ierr=nf_put_att_text (ncid, vidPH, 'units',     lvar,
     &                                  vname(3,indxPH_rst)(1:lvar))
          ierr=nf_put_att_text (ncid, vidPH, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#ifdef MASK_LAND_DATA 
        ierr=nf_put_att_FOUT (ncid, vidPH, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif
!
! pCO2:
!
        lvar=lenstr(vname(1,indxPCO2_rst))
        ierr=nf_def_var (ncid, vname(1,indxPCO2_rst)(1:lvar), NF_FOUT,
     &                                           3, r2dgrd, vidPCO2)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxPCO2_rst)
#  else
        text=vname(2,indxPCO2_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidPCO2, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxPCO2_rst))
        ierr=nf_put_att_text (ncid, vidPCO2, 'units',     lvar,
     &                                  vname(3,indxPCO2_rst)(1:lvar))
          ierr=nf_put_att_text (ncid, vidPCO2, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#ifdef MASK_LAND_DATA 
        ierr=nf_put_att_FOUT (ncid, vidPCO2, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif

!
! pCO2air:
!
        lvar=lenstr(vname(1,indxPCO2air_rst))
        ierr=nf_def_var (ncid, vname(1,indxPCO2air_rst)(1:lvar), NF_FOUT,
     &                                           3, r2dgrd, vidPCO2air)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxPCO2air_rst)
#  else
        text=vname(2,indxPCO2air_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidPCO2air, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxPCO2air_rst))
        ierr=nf_put_att_text (ncid, vidPCO2air, 'units',     lvar,
     &       vname(3,indxPCO2air_rst)(1:lvar))
          ierr=nf_put_att_text (ncid, vidPCO2air, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#ifdef MASK_LAND_DATA
        ierr=nf_put_att_FOUT (ncid, vidPCO2air, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif

# endif /* BIOLOGY_BEC || (BIOLOGY_NPZDOC && OXYGEN && CARBON) */

#if defined BIOLOGY_BEC2 && defined BEC2_DIAG
!
! 2d diagnostics:
!
        do itrc=1,nr_bec2_diag_2d
           if (wrtavg_bec2_diag_2d(itrc)) then
              lvar=lenstr(vname_bec2_diag_2d(1,itrc))
              ierr=nf_def_var (ncid, vname_bec2_diag_2d(1,itrc)(1:lvar), NF_FOUT,
     &                                           3, r2dgrd, vidT_bec2(itrc))
# ifdef AVRH
               text='averaged '/ /vname_bec2_diag_2d(2,itrc)
# else
               text=vname_bec2_diag_2d(2,itrc)
# endif
               lvar=lenstr(text)
               ierr=nf_put_att_text (ncid, vidT_bec2(itrc), 'long_name',
     &                                          lvar, text(1:lvar))
               lvar=lenstr(vname_bec2_diag_2d(3,itrc))
               ierr=nf_put_att_text (ncid, vidT_bec2(itrc), 'units', lvar,
     &                               vname_bec2_diag_2d(3,itrc)(1:lvar))
              ierr=nf_put_att_text (ncid, vidT_bec2(itrc), 'coordinates',15,
     &                              'lon_rho lat_rho') 
# ifdef MASK_LAND_DATA
               ierr=nf_put_att_FOUT (ncid, vidT_bec2(itrc), '_FillValue',
     &                                       NF_FOUT, 1, spv_set)
# endif
# ifdef NCCOMPRESS
             ierr=nf_def_var_deflate(ncid, vidT_bec2(itrc), ncshuff, ncdefl, nclev )
             ierr=nf_def_var_chunking(ncid, vidT_bec2(itrc), ncctg, ncrchnk3)
# endif
# ifdef HFREQ_2D_AVERAGES
               ierr=nf_put_att_text (ncid, vidT_bec2(itrc), 'sigma-level',
     &                                          lvar, 'top')
# endif
           endif
        enddo
!
! 3d diagnostics:
!
        do itrc=1,nr_bec2_diag_3d
           if (wrtavg_bec2_diag_3d(itrc)) then
              lvar=lenstr(vname_bec2_diag_3d(1,itrc))
              ierr=nf_def_var (ncid, vname_bec2_diag_3d(1,itrc)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidT_bec2(nr_bec2_diag_2d+itrc))
# ifdef AVRH
                text='averaged '/ /vname_bec2_diag_3d(2,itrc)
# else
               text=vname_bec2_diag_3d(2,itrc)
# endif
               lvar=lenstr(text)
               ierr=nf_put_att_text (ncid, vidT_bec2(nr_bec2_diag_2d+itrc), 'long_name',
     &                                          lvar, text(1:lvar))
               lvar=lenstr(vname_bec2_diag_3d(3,itrc))
               ierr=nf_put_att_text (ncid, vidT_bec2(nr_bec2_diag_2d+itrc), 'units', lvar,
     &                               vname_bec2_diag_3d(3,itrc)(1:lvar))
             ierr=nf_put_att_text (ncid, vidT_bec2(nr_bec2_diag_2d+itrc), 'coordinates',15,
     &                              'lon_rho lat_rho') 
# ifdef MASK_LAND_DATA
               ierr=nf_put_att_FOUT (ncid, vidT_bec2(nr_bec2_diag_2d+itrc), '_FillValue',
     &                                       NF_FOUT, 1, spv_set)
# endif
# ifdef NCCOMPRESS
             ierr=nf_def_var_deflate(ncid, vidT_bec2(nr_bec2_diag_2d+itrc), ncshuff, ncdefl, nclev )
             ierr=nf_def_var_chunking(ncid, vidT_bec2(nr_bec2_diag_2d+itrc), ncctg, ncrchnk3)
# endif
# ifdef HFREQ_2D_AVERAGES
               ierr=nf_put_att_text (ncid, vidT_bec2(nr_bec2_diag_2d+itrc), 'sigma-level',
     &                                          lvar, 'top')
# endif
           endif
        enddo
#endif /* BIOLOGY_BEC2 && BEC2_DIAG */


# if defined BIOLOGY_BEC || defined BIOLOGY_NPZDOC
!
! PARinc:
!
        lvar=lenstr(vname(1,indxPARinc_rst))
        ierr=nf_def_var (ncid, vname(1,indxPARinc_rst)(1:lvar), NF_FOUT,
     &       3, r2dgrd, vidPARinc)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxPARinc_rst)
#  else
        text=vname(2,indxPARinc_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidPARinc, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxPARinc_rst))
        ierr=nf_put_att_text (ncid, vidPARinc, 'units',     lvar,
     &                                  vname(3,indxPARinc_rst)(1:lvar))
          ierr=nf_put_att_text (ncid, vidPARinc, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#ifdef MASK_LAND_DATA 
        ierr=nf_put_att_FOUT (ncid, vidPARinc, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif
!
! PAR:
!
        lvar=lenstr(vname(1,indxPAR_rst))
        ierr=nf_def_var (ncid, vname(1,indxPAR_rst)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidPAR)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxPAR_rst)
#  else
        text=vname(2,indxPAR_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidPAR, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxPAR_rst))
        ierr=nf_put_att_text (ncid, vidPAR, 'units',     lvar,
     &                                  vname(3,indxPAR_rst)(1:lvar))
          ierr=nf_put_att_text (ncid, vidPAR, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#ifdef MASK_LAND_DATA 
        ierr=nf_put_att_FOUT (ncid, vidPAR, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif
#endif /* BIOLOGY_BEC || BIOLOGY_NPZDOC */

!DL:
# ifdef WRITE_DEPTHS
!
! depths of rho points:
!
        lvar=lenstr(vname(1,indxz_r))
        ierr=nf_def_var (ncid, vname(1,indxz_r)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidz_r)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxz_r)
#  else
        text=vname(2,indxz_r)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidz_r, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxz_r))
        ierr=nf_put_att_text (ncid, vidz_r, 'units',     lvar,
     &                                  vname(3,indxz_r)(1:lvar))
          ierr=nf_put_att_text (ncid, vidz_r, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#  ifdef MASK_LAND_DATA 
        ierr=nf_put_att_FOUT (ncid, vidz_r, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#  endif
!
! depths at w points:
!
        lvar=lenstr(vname(1,indxz_w))
        ierr=nf_def_var (ncid, vname(1,indxz_w)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidz_w)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxz_w)
#  else
        text=vname(2,indxz_w)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidz_w, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxz_w))
        ierr=nf_put_att_text (ncid, vidz_w, 'units',     lvar,
     &                                  vname(3,indxz_w)(1:lvar))
          ierr=nf_put_att_text (ncid, vidz_w, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#  ifdef MASK_LAND_DATA 
        ierr=nf_put_att_FOUT (ncid, vidz_w, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#  endif
!
! thicknesses of sigma layers:
!
        lvar=lenstr(vname(1,indxHz))
        ierr=nf_def_var (ncid, vname(1,indxHz)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidHz)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxHz)
#  else
        text=vname(2,indxHz)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidHz, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxHz))
        ierr=nf_put_att_text (ncid, vidHz, 'units',     lvar,
     &                                  vname(3,indxHz)(1:lvar))
          ierr=nf_put_att_text (ncid, vidHz, 'coordinates',15,
     &                              'lon_rho lat_rho') 
#  ifdef MASK_LAND_DATA 
        ierr=nf_put_att_FOUT (ncid, vidHz, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#  endif
# endif /* WRITE_DEPTHS */
!
! Gas exchange fluxes:
!
# if defined BIOLOGY_NPZDOC && defined OXYGEN
        do itrc = 1, NumGasExcTerms
           lvar=lenstr(vname_GasExcFlux(1,itrc))
           ierr=nf_def_var (ncid, vname_GasExcFlux(1,itrc)(1:lvar), NF_FOUT,
     &                      3, r2dgrd, vidGasExcFlux(itrc))
#  ifdef AVRH
           text='averaged '/ /vname_GasExcFlux(2,itrc)
#  else
           text=vname_GasExcFlux(2,itrc)
#  endif
           lvar=lenstr(text)
           ierr=nf_put_att_text (ncid, vidGasExcFlux(itrc), 'long_name', lvar,
     &                                              text(1:lvar))
           lvar=lenstr(vname_GasExcFlux(3,itrc))
           ierr=nf_put_att_text (ncid, vidGasExcFlux(itrc), 'units',     lvar,
     &                                  vname_GasExcFlux(3,itrc)(1:lvar))
          ierr=nf_put_att_text (ncid, vidGasExcFlux(itrc), 'coordinates',15,
     &                              'lon_rho lat_rho') 
#  ifdef MASK_LAND_DATA 
           ierr=nf_put_att_FOUT (ncid, vidGasExcFlux(itrc), '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#  endif
        end do
# endif /* BIOLOGY_NPZDOC && OXYGEN */
#endif /* SOLVE3D */

! Leave definition mode.
! ----- ---------- -----

        !  Pad header section (20kB) to allow faster adding of new variables
        ierr=nf_enddef(ncid,20000,8,20000,8)
#ifdef MPI_SILENT_MODE
        if (mynode == 0) then
#endif
         write(*,'(7x,4A,I4)') 'DEF_FOUT :: created new netCDF file ''',
     &                          fname(1:lfnm), '''.' MYID
#ifdef MPI_SILENT_MODE
        endif
#endif

! Open existing file and prepare for appending data:   Inquire about
! ==== ======== ==== === ======= === ========= ====    its dimensions
! and variables; check for consistency with model dimensions -- if the
! file is rejected (it cannot be opened, or its dimensions do not match
! the ones in the mode) create a new file.  After that verify
! that all necessary variables are already defined, find and save
! their netCDF IDs.

      elseif (ncid == -1) then  !--> alt. to "create_new_file"
        ierr=nf_open(fname(1:lfnm), nf_write, ncid)
        if (ierr == nf_noerr) then
          ierr=nf_set_fill(ncid, nf_nofill, prev_fill_mode)
          if (ierr == nf_noerr) then
#ifdef MPI_SILENT_MODE
            if (mynode == 0) then
#endif
            write(*,'(7x,5A,I4)')    'DEF_FOUT :: opened existing ',
     &                     'file ''', fname(1:lfnm),  '''.' MYID
#ifdef MPI_SILENT_MODE
            endif
#endif
          else
# ifdef AVRH
            write(*,'(1x,4A,I4)') '### ERROR: def_avg :: Cannot ',
# else
            write(*,'(1x,4A,I4)') '### ERROR: def_his :: Cannot ',
# endif
     &         'switch to ''nf_nofill'' mode.', nf_strerror(ierr)
     &          MYID
            goto 99
          endif

          ierr=checkdims(ncid, fname, rec)
          if (ierr == nf_noerr) then
            if (rec_per_file == 0) then
              ierr=rec+1 - total_rec
            else
              ierr=rec+1 - (1+mod(total_rec-1, rec_per_file))
            endif
            if (ierr > 0) then
              mpi_master_only write(*,
     &                 '(/1x,3A,I5,1x,A/8x,3A,I5,/8x,A,I5,1x,A/)'
     &           ) 'WARNING: ', 'DEF_FOUT',': Actual number of records',
     &               rec,  'in netCDF file',  '''',  fname(1:lfnm),
     &             ''' exceeds the record number from restart data',
     &             rec+1-ierr,'/', total_rec,', restart is assumed.'
              rec=rec-ierr
            elseif (rec_per_file == 0) then
              total_rec=rec+1           ! <-- set to the next record
#if defined MPI && !defined PARALLEL_FILES
              if (mynode > 0) total_rec=total_rec-1
#endif
            endif
            ierr=nf_noerr
          endif
        endif

        if (ierr /= nf_noerr) then
#if defined MPI && !defined PARALLEL_FILES
          if (mynode == 0) then
            create_new_file=.true. ; goto 10 !--> reject and create new
          else
            write(*,'(/1x,5A,I4/)')    '### ERROR: DEF_FOUT :: ',
     &        'Cannot open file ''', fname(1:lfnm), '''.' MYID
            goto 99                                       !--> ERROR
          endif
#else
          create_new_file=.true. ; goto 10   !--> reject and create new
#endif
        endif

! Find netCDF IDs of evolving model variables:
! ---- ------ --- -- -------- ----- ----------

! Time-step indices, ocean time:

#ifndef AVRH
        ierr=nf_inq_varid(ncid, 'time_step', vidTstep)
        if (ierr /= nf_noerr) write(*,1) 'time_step', fname(1:lfnm)
#endif
        if (ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxTime))
          ierr=nf_inq_varid(ncid,vname(1,indxTime)(1:lvar), vidTime)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxTime)(1:lvar),
     &                                                 fname(1:lfnm)
        endif

! Free-surface and 2D barotropic velocity components

        if (wrt(indxZ) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxZ))
          ierr=nf_inq_varid(ncid, vname(1,indxZ)(1:lvar), vidZ)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxZ)(1:lvar),
     &                                              fname(1:lfnm)
        endif

! 2D momenta in XI- and ETA-directions.

        if (wrt(indxUb) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxUb))
          ierr=nf_inq_varid(ncid, vname(1,indxUb)(1:lvar), vidUb)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxUb)(1:lvar),
     &                                               fname(1:lfnm)
        endif
 
        if (wrt(indxVb) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxVb))
          ierr=nf_inq_varid(ncid, vname(1,indxVb)(1:lvar), vidVb)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxVb)(1:lvar),
     &                                               fname(1:lfnm)
        endif
 
#ifdef SOLVE3D
 
! 3D momenta in XI- and ETA-directions.

        if (wrt(indxU) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxU))
          ierr=nf_inq_varid(ncid, vname(1,indxU)(1:lvar), vidU)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxU)(1:lvar),
     &                                              fname(1:lfnm)
        endif
        if (wrt(indxV)  .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxV))
          ierr=nf_inq_varid(ncid, vname(1,indxV)(1:lvar), vidV)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxV)(1:lvar),
     &                                              fname(1:lfnm)
        endif

! Tracer variables.

        do itrc=1,NT
          if (wrt(indxT+itrc-1) .and. ierr == nf_noerr) then
            lvar=lenstr(vname(1,indxT+itrc-1))
            ierr=nf_inq_varid(ncid, vname(1,indxT+itrc-1)(1:lvar),
     &                                                 vidT(itrc))
            if (ierr /= nf_noerr) write(*,1)
     &               vname(1,indxT+itrc-1)(1:lvar), fname(1:lfnm)
          endif
        enddo

# ifdef SEDIMENT_BIOLOGY
!
! Sediment tracer variables.
!
        do itrc=1,NT_sed
          if (wrt(indxSedOrgN+itrc-1)) then
            lvar=lenstr(vname(1,indxSedOrgN+itrc-1))
            ierr=nf_inq_varid (ncid, 
     &           vname(1,indxSedOrgN+itrc-1)(1:lvar),vidTsed(itrc))
            if (ierr .ne. nf_noerr) then
              write(*,1) vname(1,indxSedOrgN+itrc-1)(1:lvar),
     &                                       fname(1:lfnm) 
              goto 99                                     !--> ERROR
            endif
          endif
        enddo
# endif /* SEDIMENT_BIOLOGY */
!
! Density anomaly.

        if (wrt(indxR) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxR))
          ierr=nf_inq_varid(ncid, vname(1,indxR)(1:lvar), vidR)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxR)(1:lvar),
     &                                              fname(1:lfnm)
        endif

! S-coordinate "omega" and "true" W- vertical velocities.

        if (wrt(indxO) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxO))
          ierr=nf_inq_varid(ncid, vname(1,indxO)(1:lvar), vidO)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxO)(1:lvar),
     &                                              fname(1:lfnm)
        endif

        if (wrt(indxW) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxW))
          ierr=nf_inq_varid(ncid, vname(1,indxW)(1:lvar), vidW)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxW)(1:lvar),
     &                                              fname(1:lfnm)
        endif

! Vertical viscosity, thermal conductivity, and salinity diffusion.

        if (wrt(indxAkv) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxAkv))
          ierr=nf_inq_varid(ncid, vname(1,indxAkv)(1:lvar), vidAkv)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxAkv)(1:lvar),
     &                                                fname(1:lfnm)
        endif

        if (wrt(indxAkt) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxAkt))
          ierr=nf_inq_varid(ncid,vname(1,indxAkt)(1:lvar), vidAkt)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxAkt)(1:lvar),
     &                                                fname(1:lfnm)
        endif

# ifdef SALINITY
        if (wrt(indxAks) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxAks))
          ierr=nf_inq_varid(ncid,vname(1,indxAks)(1:lvar), vidAks)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxAks)(1:lvar),
     &                                                fname(1:lfnm)
        endif
# endif
!AH16:
# if defined WRITE_CO2FLX
! CO2 flux
        if (wrt(indxCO2flx) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxCO2flx))
          ierr=nf_inq_varid(ncid,vname(1,indxCO2flx)(1:lvar), vidCO2flx)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxCO2flx)(1:lvar),
     &                                                 fname(1:lfnm)
        endif
# endif /* WRITE_CO2FLX */
!AH16:
# if defined WRITE_HEATFLX
! Heat flux
        if (wrt(indxHeatflx) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxHeatflx))
          ierr=nf_inq_varid(ncid,vname(1,indxHeatflx)(1:lvar), vidHeatflx)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxHeatflx)(1:lvar),
     &                                                 fname(1:lfnm)
        endif
# endif /* WRITE_HEATFLX */
!AH16:
# if defined WRITE_TEMP_REST
! Restoring flux for temperature
        if (wrt(indxRestflxTemp) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxRestflxTemp))
          ierr=nf_inq_varid(ncid,vname(1,indxRestflxTemp)(1:lvar), vidRestflxTemp)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxRestflxTemp)(1:lvar),
     &                                                 fname(1:lfnm)
        endif
# endif /* WRITE_TEMP_REST */
!AH16:
# if defined WRITE_SALT_REST
! Restoring flux for salinity
        if (wrt(indxRestflxSalt) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxRestflxSalt))
          ierr=nf_inq_varid(ncid,vname(1,indxRestflxSalt)(1:lvar), vidRestflxSalt)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxRestflxSalt)(1:lvar),
     &                                                 fname(1:lfnm)
        endif
# endif /* WRITE_SALT_REST */
# ifdef LMD_KPP
! Depth of surface planetary boundary layer.

        if (wrt(indxHbls) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxHbls))
          ierr=nf_inq_varid(ncid,vname(1,indxHbls)(1:lvar), vidHbls)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxHbls)(1:lvar),
     &                                                 fname(1:lfnm)
        endif
# endif
# ifdef LMD_BKPP
! Thickness of bottom boundary layer.

        if (wrt(indxHbbl) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxHbbl))
          ierr=nf_inq_varid(ncid,vname(1,indxHbbl)(1:lvar), vidHbbl)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxHbbl)(1:lvar),
     &                                                 fname(1:lfnm)
        endif
# endif
# ifdef KPP_DIAGNOSE
        if (wrt(indxKppRichm) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxKppRichm))
          ierr=nf_inq_varid(ncid,vname(1,indxKppRichm)(1:lvar), vidKppRichm)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxKppRichm)(1:lvar),
     &                                                fname(1:lfnm)
        endif
        if (wrt(indxKppRicht) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxKppRicht))
          ierr=nf_inq_varid(ncid,vname(1,indxKppRicht)(1:lvar), vidKppRicht)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxKppRicht)(1:lvar),
     &                                                fname(1:lfnm)
        endif
        if (wrt(indxKppSblSh) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxKppSblSh))
          ierr=nf_inq_varid(ncid,vname(1,indxKppSblSh)(1:lvar), vidKppSblSh)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxKppSblSh)(1:lvar),
     &                                                fname(1:lfnm)
        endif
        if (wrt(indxKppSblSt) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxKppSblSt))
          ierr=nf_inq_varid(ncid,vname(1,indxKppSblSt)(1:lvar), vidKppSblSt)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxKppSblSt)(1:lvar),
     &                                                fname(1:lfnm)
        endif
        if (wrt(indxKppSblRot) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxKppSblRot))
          ierr=nf_inq_varid(ncid,vname(1,indxKppSblRot)(1:lvar), vidKppSblRot)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxKppSblRot)(1:lvar),
     &                                                fname(1:lfnm)
        endif
        if (wrt(indxKppSblEnt) .and. ierr == nf_noerr) then
          lvar=lenstr(vname(1,indxKppSblEnt))
          ierr=nf_inq_varid(ncid,vname(1,indxKppSblEnt)(1:lvar), vidKppSblEnt)
          if (ierr /= nf_noerr) write(*,1) vname(1,indxKppSblEnt)(1:lvar),
     &                                                fname(1:lfnm)
        endif
# endif

# if defined BIOLOGY_BEC || (defined BIOLOGY_NPZDOC && \
    defined OXYGEN && defined CARBON)
#  if defined CH_CARBON_DEPTH

!
! HCO3_DEPTH
!
        lvar=lenstr(vname(1,indxHCO3d_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxHCO3d_rst)(1:lvar), vidHCO3d)
        if (ierr .ne. nf_noerr) then
           write(*,1) vname(1,indxHCO3d_rst)(1:lvar), fname(1:lfnm)
           goto 99                                       !--> ERROR
        endif

!
! CO3_DEPTH
!
        lvar=lenstr(vname(1,indxCO3d_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxCO3d_rst)(1:lvar), vidCO3d)
        if (ierr .ne. nf_noerr) then
           write(*,1) vname(1,indxCO3d_rst)(1:lvar), fname(1:lfnm)
           goto 99                                       !--> ERROR
        endif

!
! Co2STAR_DEPTH
!
        lvar=lenstr(vname(1,indxCO2STARd_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxCO2STARd_rst)(1:lvar), vidCO2STARd)
        if (ierr .ne. nf_noerr) then
           write(*,1) vname(1,indxCO2STARd_rst)(1:lvar), fname(1:lfnm)
           goto 99                                       !--> ERROR
        endif

!
! PH_DEPTH
!
        lvar=lenstr(vname(1,indxPHd_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxPHd_rst)(1:lvar), vidPHd)
        if (ierr .ne. nf_noerr) then
           write(*,1) vname(1,indxPHd_rst)(1:lvar), fname(1:lfnm)
           goto 99                                       !--> ERROR
        endif


#  endif /* CH_CARBON_DEPTH */
!
! pH
!
        lvar=lenstr(vname(1,indxPH_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxPH_rst)(1:lvar), vidPH)
        if (ierr .ne. nf_noerr) then
           write(*,1) vname(1,indxPH_rst)(1:lvar), fname(1:lfnm)
           goto 99                                       !--> ERROR
        endif
!
! pCO2:
!
        lvar=lenstr(vname(1,indxPCO2_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxPCO2_rst)(1:lvar), vidPCO2)
        if (ierr .ne. nf_noerr) then
           write(*,1) vname(1,indxPCO2_rst)(1:lvar), fname(1:lfnm)
           goto 99                                       !--> ERROR
        endif
!
! pCO2air:
!
        lvar=lenstr(vname(1,indxPCO2air_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxPCO2air_rst)(1:lvar), 
     &       vidPCO2air)
        if (ierr .ne. nf_noerr) then
           write(*,1) vname(1,indxPCO2air_rst)(1:lvar), 
     &          fname(1:lfnm)
           goto 99                                       !--> ERROR
        endif
# endif /* BIOLOGY_BEC || (BIOLOGY_NPZDOC && OXYGEN && CARBON) */

# if defined BIOLOGY_BEC2 && defined BEC2_DIAG
!
! 2d diagnostics:
!
        do itrc=1,nr_bec2_diag_2d
           if (wrtavg_bec2_diag_2d(itrc)) then
              lvar=lenstr(vname_bec2_diag_2d(1,itrc))
              ierr=nf_inq_varid (ncid,vname_bec2_diag_2d(1,itrc)(1:lvar), 
     &                        vidT_bec2(itrc))
              if (ierr .ne. nf_noerr) then
                 write(*,1) vname_bec2_diag_2d(1,itrc)(1:lvar), 
     &             fname(1:lfnm)
                 goto 99                                       !--> ERROR
              endif
           endif
        end do
!
! 3d diagnostics:
!
        do itrc=1,nr_bec2_diag_3d
           if (wrtavg_bec2_diag_3d(itrc)) then
              lvar=lenstr(vname_bec2_diag_3d(1,itrc))
              ierr=nf_inq_varid (ncid,vname_bec2_diag_3d(1,itrc)(1:lvar), 
     &                        vidT_bec2(nr_bec2_diag_2d+itrc))
              if (ierr .ne. nf_noerr) then
                 write(*,1) vname_bec2_diag_3d(1,itrc)(1:lvar), 
     &             fname(1:lfnm)
                 goto 99                                       !--> ERROR
              endif
           endif
        end do
# endif /* BIOLOGY_BEC2 && defined BEC2_DIAG */

# if defined BIOLOGY_BEC || defined BIOLOGY_NPZDOC
!
! PARinc:
!
        lvar=lenstr(vname(1,indxPARinc_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxPARinc_rst)(1:lvar), 
     &       vidPARinc)
        if (ierr .ne. nf_noerr) then
           write(*,1) vname(1,indxPARinc_rst)(1:lvar), 
     &          fname(1:lfnm)
           goto 99                                       !--> ERROR
        endif
!
! PAR:
!
        lvar=lenstr(vname(1,indxPAR_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxPAR_rst)(1:lvar), vidPAR)
        if (ierr .ne. nf_noerr) then
           write(*,1) vname(1,indxPAR_rst)(1:lvar), fname(1:lfnm)
           goto 99                                       !--> ERROR
        endif
# endif /* BIOLOGY_BEC || BIOLOGY_NPZDOC */
!DL June 2011:
# ifdef WRITE_DEPTHS
!
! depths of rho points:
!
        lvar=lenstr(vname(1,indxz_r))
        ierr=nf_inq_varid (ncid,vname(1,indxz_r)(1:lvar), vidz_r)
        if (ierr .ne. nf_noerr) then
           write(*,1) vname(1,indxz_r)(1:lvar), fname(1:lfnm)
           goto 99                                       !--> ERROR
        endif
!
! depths at w points:
!
        lvar=lenstr(vname(1,indxz_w))
        ierr=nf_inq_varid (ncid,vname(1,indxz_w)(1:lvar), vidz_w)
        if (ierr .ne. nf_noerr) then
           write(*,1) vname(1,indxz_w)(1:lvar), fname(1:lfnm)
           goto 99                                       !--> ERROR
        endif
!
! thicknesses of sigma layers:
!
        lvar=lenstr(vname(1,indxHz))
        ierr=nf_inq_varid (ncid,vname(1,indxHz)(1:lvar), vidHz)
        if (ierr .ne. nf_noerr) then
           write(*,1) vname(1,indxHz)(1:lvar), fname(1:lfnm)
           goto 99                                       !--> ERROR
        endif
# endif /* WRITE_DEPTHS */
!
! gas exchange fluxes:
!
# if defined BIOLOGY_NPZDOC && defined OXYGEN
        do itrc = 1, NumGasExcTerms
           lvar=lenstr(vname_GasExcFlux(1,itrc))
           ierr=nf_inq_varid (ncid, 
     &          vname_GasExcFlux(1,itrc)(1:lvar),
     &          vidGasExcFlux(itrc))
           if (ierr .ne. nf_noerr) then
              write(*,1) 
     &             vname_GasExcFlux(1,itrc)(1:lvar), 
     &             fname(1:lfnm)
              goto 99           !--> ERROR
           endif
        end do
# endif /* BIOLOGY_NPZDOC && OXYGEN */
#endif /* SOLVE3D */
        if (ierr == nf_noerr) then
#ifdef MPI_SILENT_MODE
          if (mynode == 0) then
#endif
          write(*,'(7x,4A,I4,2x,A,I4)') 'DEF_FOUT :: opened existing ',
     &   'file ''', fname(1:lfnm), ''' from rec =', rec MYID
#ifdef MPI_SILENT_MODE
          endif
#endif
        endif

#if defined MPI && !defined PARALLEL_FILES
      else
        ierr=nf_open(fname(1:lfnm), nf_write, ncid)
        if (ierr == nf_noerr) then
          ierr=nf_set_fill(ncid, nf_nofill, prev_fill_mode)
          if (ierr == nf_noerr) then
# ifndef MPI_SILENT_MODE
            write(*,'(7x,5A,I4)')    'def_FOUT :: reopen existing ',
     &              'file ''', fname(1:lfnm), '''.' MYID
# endif
          else
            write(*,'(1x,4A,I4)')  '### ERROR: def_FOUT :: Cannot ',
     &         'switch to ''nf_nofill'' mode.', nf_strerror(ierr)
     &          MYID
          endif
        else
          write(*,'(/1x,6A,I4/)')  '### ERROR: def_FOUT :: Cannot ',
     &                      'reopen file ''', fname(1:lfnm), '''.',
     &                       nf_strerror(ierr) MYID
        endif
#endif
      endif             !<--  create_new_file
      if (ierr /= nf_noerr) goto 99

#if (defined PUT_GRID_INTO_HISTORY && !defined AVRH)\
 || (defined PUT_GRID_INTO_AVERAGES && defined AVRH)

! Write grid variables.

        if (total_rec <= 1) call wrt_grid (ncid, fname, lfnm)
#endif

   99 return

#ifdef AVRH
    1 format(/1x,'### ERROR: def_avg :: Cannot find variable ''',
#else
    1 format(/1x,'### ERROR: def_his :: Cannot find variable ''',
#endif
     &                            A, ''' in file ''', A, '''.'/)
      end
 
#undef ncid
#undef fname
#undef rec_per_file
#undef wrt
#undef vidTime
#undef vidTstep
#undef vidZ
#undef vidUb
#undef vidVb
#undef vidU
#undef vidV
#undef vidT
#if defined BIOLOGY_NPZDOC || defined BIOLOGY_BEC
# if defined CH_CARBON_DEPTH
#  undef vidPHDEPTH
#  undef vidCO2STARd
#  undef vidHCO3d
#  undef vidCO3d
#  undef vidPHd
# endif /* CH_CARBON_DEPTH */
# undef vidPH
# undef vidPCO2
# undef vidPCO2air
# undef vidPARinc
# undef vidPAR
#  ifdef SEDIMENT_BIOLOGY
#   undef vidTsed
#  endif
#endif /* BIOLOGY_NPZDOC || BIOLOGY_BEC */
# ifdef WRITE_DEPTHS
#  undef vidz_r
#  undef vidz_w
#  undef vidHz
# endif /* WRITE_DEPTHS */
#undef vidGasExcFlux
# if defined BIOLOGY_BEC2 && defined BEC2_DIAG
#  undef vidT_bec2
# endif

#undef vidR
#undef vidO
#undef vidW
#undef vidAkv
#undef vidAkt
#undef vidAks
#if defined WRITE_CO2FLX
# undef vidCO2flx
#endif
#if defined WRITE_HEATFLX
# undef vidHeatflx
#endif
#if defined WRITE_TEMP_REST
# undef vidRestflxTemp
#endif
#if defined WRITE_SALT_REST
# undef vidRestflxSalt
#endif
#undef vidHbls
#undef vidHbbl
#ifdef KPP_DIAGNOSE
# undef vidKppRichm
# undef vidKppRicht
# undef vidKppSblSh
# undef vidKppSblSt
# undef vidKppSblSot
# undef vidKppSblEnt
#endif
#ifdef WKB_WWAVE
# undef vidWKB
#endif
#ifdef MRL_WCI
# undef vidSUP
# undef vidUST2D
# undef vidVST2D
# undef vidUST
# undef vidVST
# undef vidWST
# undef vidAkb
# undef vidAkw
# undef vidKVF
# undef vidCALP
# undef vidKAPS
#endif

#undef DEF_FOUT
#undef SDEF_FOUT
#undef NVDIM
#undef RGRD
#undef UGRD
#undef VGRD
#undef WGRD
 
#ifndef AVRH
# define AVRH
# ifdef AVERAGES
#  include "def_his.F"
# endif
#else
# if defined  SLICE_AVG && !defined AVR2DH
!--> # ifndef AVR2DH
#  define AVR2DH
#  include "def_his.F"
# endif
#endif
